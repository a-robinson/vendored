// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/cloud/vision/v1/image_annotator.proto
// DO NOT EDIT!

package v1 // import "google.golang.org/genproto/googleapis/cloud/vision/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import google_type "google.golang.org/genproto/googleapis/type/color"
import google_type1 "google.golang.org/genproto/googleapis/type/latlng"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A bucketized representation of likelihood meant to give our clients highly
// stable results across model upgrades.
type Likelihood int32

const (
	// Unknown likelihood.
	Likelihood_UNKNOWN Likelihood = 0
	// The image very unlikely belongs to the vertical specified.
	Likelihood_VERY_UNLIKELY Likelihood = 1
	// The image unlikely belongs to the vertical specified.
	Likelihood_UNLIKELY Likelihood = 2
	// The image possibly belongs to the vertical specified.
	Likelihood_POSSIBLE Likelihood = 3
	// The image likely belongs to the vertical specified.
	Likelihood_LIKELY Likelihood = 4
	// The image very likely belongs to the vertical specified.
	Likelihood_VERY_LIKELY Likelihood = 5
)

var Likelihood_name = map[int32]string{
	0: "UNKNOWN",
	1: "VERY_UNLIKELY",
	2: "UNLIKELY",
	3: "POSSIBLE",
	4: "LIKELY",
	5: "VERY_LIKELY",
}
var Likelihood_value = map[string]int32{
	"UNKNOWN":       0,
	"VERY_UNLIKELY": 1,
	"UNLIKELY":      2,
	"POSSIBLE":      3,
	"LIKELY":        4,
	"VERY_LIKELY":   5,
}

func (x Likelihood) String() string {
	return proto.EnumName(Likelihood_name, int32(x))
}
func (Likelihood) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Type of image feature.
type Feature_Type int32

const (
	// Unspecified feature type.
	Feature_TYPE_UNSPECIFIED Feature_Type = 0
	// Run face detection.
	Feature_FACE_DETECTION Feature_Type = 1
	// Run landmark detection.
	Feature_LANDMARK_DETECTION Feature_Type = 2
	// Run logo detection.
	Feature_LOGO_DETECTION Feature_Type = 3
	// Run label detection.
	Feature_LABEL_DETECTION Feature_Type = 4
	// Run OCR.
	Feature_TEXT_DETECTION Feature_Type = 5
	// Run various computer vision models to compute image safe-search properties.
	Feature_SAFE_SEARCH_DETECTION Feature_Type = 6
	// Compute a set of properties about the image (such as the image's dominant colors).
	Feature_IMAGE_PROPERTIES Feature_Type = 7
)

var Feature_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "FACE_DETECTION",
	2: "LANDMARK_DETECTION",
	3: "LOGO_DETECTION",
	4: "LABEL_DETECTION",
	5: "TEXT_DETECTION",
	6: "SAFE_SEARCH_DETECTION",
	7: "IMAGE_PROPERTIES",
}
var Feature_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":      0,
	"FACE_DETECTION":        1,
	"LANDMARK_DETECTION":    2,
	"LOGO_DETECTION":        3,
	"LABEL_DETECTION":       4,
	"TEXT_DETECTION":        5,
	"SAFE_SEARCH_DETECTION": 6,
	"IMAGE_PROPERTIES":      7,
}

func (x Feature_Type) String() string {
	return proto.EnumName(Feature_Type_name, int32(x))
}
func (Feature_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// Face landmark (feature) type.
// Left and right are defined from the vantage of the viewer of the image,
// without considering mirror projections typical of photos. So, LEFT_EYE,
// typically is the person's right eye.
type FaceAnnotation_Landmark_Type int32

const (
	// Unknown face landmark detected. Should not be filled.
	FaceAnnotation_Landmark_UNKNOWN_LANDMARK FaceAnnotation_Landmark_Type = 0
	// Left eye.
	FaceAnnotation_Landmark_LEFT_EYE FaceAnnotation_Landmark_Type = 1
	// Right eye.
	FaceAnnotation_Landmark_RIGHT_EYE FaceAnnotation_Landmark_Type = 2
	// Left of left eyebrow.
	FaceAnnotation_Landmark_LEFT_OF_LEFT_EYEBROW FaceAnnotation_Landmark_Type = 3
	// Right of left eyebrow.
	FaceAnnotation_Landmark_RIGHT_OF_LEFT_EYEBROW FaceAnnotation_Landmark_Type = 4
	// Left of right eyebrow.
	FaceAnnotation_Landmark_LEFT_OF_RIGHT_EYEBROW FaceAnnotation_Landmark_Type = 5
	// Right of right eyebrow.
	FaceAnnotation_Landmark_RIGHT_OF_RIGHT_EYEBROW FaceAnnotation_Landmark_Type = 6
	// Midpoint between eyes.
	FaceAnnotation_Landmark_MIDPOINT_BETWEEN_EYES FaceAnnotation_Landmark_Type = 7
	// Nose tip.
	FaceAnnotation_Landmark_NOSE_TIP FaceAnnotation_Landmark_Type = 8
	// Upper lip.
	FaceAnnotation_Landmark_UPPER_LIP FaceAnnotation_Landmark_Type = 9
	// Lower lip.
	FaceAnnotation_Landmark_LOWER_LIP FaceAnnotation_Landmark_Type = 10
	// Mouth left.
	FaceAnnotation_Landmark_MOUTH_LEFT FaceAnnotation_Landmark_Type = 11
	// Mouth right.
	FaceAnnotation_Landmark_MOUTH_RIGHT FaceAnnotation_Landmark_Type = 12
	// Mouth center.
	FaceAnnotation_Landmark_MOUTH_CENTER FaceAnnotation_Landmark_Type = 13
	// Nose, bottom right.
	FaceAnnotation_Landmark_NOSE_BOTTOM_RIGHT FaceAnnotation_Landmark_Type = 14
	// Nose, bottom left.
	FaceAnnotation_Landmark_NOSE_BOTTOM_LEFT FaceAnnotation_Landmark_Type = 15
	// Nose, bottom center.
	FaceAnnotation_Landmark_NOSE_BOTTOM_CENTER FaceAnnotation_Landmark_Type = 16
	// Left eye, top boundary.
	FaceAnnotation_Landmark_LEFT_EYE_TOP_BOUNDARY FaceAnnotation_Landmark_Type = 17
	// Left eye, right corner.
	FaceAnnotation_Landmark_LEFT_EYE_RIGHT_CORNER FaceAnnotation_Landmark_Type = 18
	// Left eye, bottom boundary.
	FaceAnnotation_Landmark_LEFT_EYE_BOTTOM_BOUNDARY FaceAnnotation_Landmark_Type = 19
	// Left eye, left corner.
	FaceAnnotation_Landmark_LEFT_EYE_LEFT_CORNER FaceAnnotation_Landmark_Type = 20
	// Right eye, top boundary.
	FaceAnnotation_Landmark_RIGHT_EYE_TOP_BOUNDARY FaceAnnotation_Landmark_Type = 21
	// Right eye, right corner.
	FaceAnnotation_Landmark_RIGHT_EYE_RIGHT_CORNER FaceAnnotation_Landmark_Type = 22
	// Right eye, bottom boundary.
	FaceAnnotation_Landmark_RIGHT_EYE_BOTTOM_BOUNDARY FaceAnnotation_Landmark_Type = 23
	// Right eye, left corner.
	FaceAnnotation_Landmark_RIGHT_EYE_LEFT_CORNER FaceAnnotation_Landmark_Type = 24
	// Left eyebrow, upper midpoint.
	FaceAnnotation_Landmark_LEFT_EYEBROW_UPPER_MIDPOINT FaceAnnotation_Landmark_Type = 25
	// Right eyebrow, upper midpoint.
	FaceAnnotation_Landmark_RIGHT_EYEBROW_UPPER_MIDPOINT FaceAnnotation_Landmark_Type = 26
	// Left ear tragion.
	FaceAnnotation_Landmark_LEFT_EAR_TRAGION FaceAnnotation_Landmark_Type = 27
	// Right ear tragion.
	FaceAnnotation_Landmark_RIGHT_EAR_TRAGION FaceAnnotation_Landmark_Type = 28
	// Left eye pupil.
	FaceAnnotation_Landmark_LEFT_EYE_PUPIL FaceAnnotation_Landmark_Type = 29
	// Right eye pupil.
	FaceAnnotation_Landmark_RIGHT_EYE_PUPIL FaceAnnotation_Landmark_Type = 30
	// Forehead glabella.
	FaceAnnotation_Landmark_FOREHEAD_GLABELLA FaceAnnotation_Landmark_Type = 31
	// Chin gnathion.
	FaceAnnotation_Landmark_CHIN_GNATHION FaceAnnotation_Landmark_Type = 32
	// Chin left gonion.
	FaceAnnotation_Landmark_CHIN_LEFT_GONION FaceAnnotation_Landmark_Type = 33
	// Chin right gonion.
	FaceAnnotation_Landmark_CHIN_RIGHT_GONION FaceAnnotation_Landmark_Type = 34
)

var FaceAnnotation_Landmark_Type_name = map[int32]string{
	0:  "UNKNOWN_LANDMARK",
	1:  "LEFT_EYE",
	2:  "RIGHT_EYE",
	3:  "LEFT_OF_LEFT_EYEBROW",
	4:  "RIGHT_OF_LEFT_EYEBROW",
	5:  "LEFT_OF_RIGHT_EYEBROW",
	6:  "RIGHT_OF_RIGHT_EYEBROW",
	7:  "MIDPOINT_BETWEEN_EYES",
	8:  "NOSE_TIP",
	9:  "UPPER_LIP",
	10: "LOWER_LIP",
	11: "MOUTH_LEFT",
	12: "MOUTH_RIGHT",
	13: "MOUTH_CENTER",
	14: "NOSE_BOTTOM_RIGHT",
	15: "NOSE_BOTTOM_LEFT",
	16: "NOSE_BOTTOM_CENTER",
	17: "LEFT_EYE_TOP_BOUNDARY",
	18: "LEFT_EYE_RIGHT_CORNER",
	19: "LEFT_EYE_BOTTOM_BOUNDARY",
	20: "LEFT_EYE_LEFT_CORNER",
	21: "RIGHT_EYE_TOP_BOUNDARY",
	22: "RIGHT_EYE_RIGHT_CORNER",
	23: "RIGHT_EYE_BOTTOM_BOUNDARY",
	24: "RIGHT_EYE_LEFT_CORNER",
	25: "LEFT_EYEBROW_UPPER_MIDPOINT",
	26: "RIGHT_EYEBROW_UPPER_MIDPOINT",
	27: "LEFT_EAR_TRAGION",
	28: "RIGHT_EAR_TRAGION",
	29: "LEFT_EYE_PUPIL",
	30: "RIGHT_EYE_PUPIL",
	31: "FOREHEAD_GLABELLA",
	32: "CHIN_GNATHION",
	33: "CHIN_LEFT_GONION",
	34: "CHIN_RIGHT_GONION",
}
var FaceAnnotation_Landmark_Type_value = map[string]int32{
	"UNKNOWN_LANDMARK":             0,
	"LEFT_EYE":                     1,
	"RIGHT_EYE":                    2,
	"LEFT_OF_LEFT_EYEBROW":         3,
	"RIGHT_OF_LEFT_EYEBROW":        4,
	"LEFT_OF_RIGHT_EYEBROW":        5,
	"RIGHT_OF_RIGHT_EYEBROW":       6,
	"MIDPOINT_BETWEEN_EYES":        7,
	"NOSE_TIP":                     8,
	"UPPER_LIP":                    9,
	"LOWER_LIP":                    10,
	"MOUTH_LEFT":                   11,
	"MOUTH_RIGHT":                  12,
	"MOUTH_CENTER":                 13,
	"NOSE_BOTTOM_RIGHT":            14,
	"NOSE_BOTTOM_LEFT":             15,
	"NOSE_BOTTOM_CENTER":           16,
	"LEFT_EYE_TOP_BOUNDARY":        17,
	"LEFT_EYE_RIGHT_CORNER":        18,
	"LEFT_EYE_BOTTOM_BOUNDARY":     19,
	"LEFT_EYE_LEFT_CORNER":         20,
	"RIGHT_EYE_TOP_BOUNDARY":       21,
	"RIGHT_EYE_RIGHT_CORNER":       22,
	"RIGHT_EYE_BOTTOM_BOUNDARY":    23,
	"RIGHT_EYE_LEFT_CORNER":        24,
	"LEFT_EYEBROW_UPPER_MIDPOINT":  25,
	"RIGHT_EYEBROW_UPPER_MIDPOINT": 26,
	"LEFT_EAR_TRAGION":             27,
	"RIGHT_EAR_TRAGION":            28,
	"LEFT_EYE_PUPIL":               29,
	"RIGHT_EYE_PUPIL":              30,
	"FOREHEAD_GLABELLA":            31,
	"CHIN_GNATHION":                32,
	"CHIN_LEFT_GONION":             33,
	"CHIN_RIGHT_GONION":            34,
}

func (x FaceAnnotation_Landmark_Type) String() string {
	return proto.EnumName(FaceAnnotation_Landmark_Type_name, int32(x))
}
func (FaceAnnotation_Landmark_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0, 0}
}

// The <em>Feature</em> indicates what type of image detection task to perform.
// Users describe the type of Google Cloud Vision API tasks to perform over
// images by using <em>Feature</em>s. Features encode the Cloud Vision API
// vertical to operate on and the number of top-scoring results to return.
type Feature struct {
	// The feature type.
	Type Feature_Type `protobuf:"varint,1,opt,name=type,enum=google.cloud.vision.v1.Feature_Type" json:"type,omitempty"`
	// Maximum number of results of this type.
	MaxResults int32 `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// External image source (Google Cloud Storage image location).
type ImageSource struct {
	// Google Cloud Storage image URI. It must be in the following form:
	// `gs://bucket_name/object_name`. For more
	// details, please see: https://cloud.google.com/storage/docs/reference-uris.
	// NOTE: Cloud Storage object versioning is not supported!
	GcsImageUri string `protobuf:"bytes,1,opt,name=gcs_image_uri,json=gcsImageUri" json:"gcs_image_uri,omitempty"`
}

func (m *ImageSource) Reset()                    { *m = ImageSource{} }
func (m *ImageSource) String() string            { return proto.CompactTextString(m) }
func (*ImageSource) ProtoMessage()               {}
func (*ImageSource) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Client image to perform Google Cloud Vision API tasks over.
type Image struct {
	// Image content, represented as a stream of bytes.
	// Note: as with all `bytes` fields, protobuffers use a pure binary
	// representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Google Cloud Storage image location. If both 'content' and 'source'
	// are filled for an image, 'content' takes precedence and it will be
	// used for performing the image annotation request.
	Source *ImageSource `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Image) GetSource() *ImageSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// A face annotation object contains the results of face detection.
type FaceAnnotation struct {
	// The bounding polygon around the face. The coordinates of the bounding box
	// are in the original image's scale, as returned in ImageParams.
	// The bounding box is computed to "frame" the face in accordance with human
	// expectations. It is based on the landmarker results.
	// Note that one or more x and/or y coordinates may not be generated in the
	// BoundingPoly (the polygon will be unbounded) if only a partial face appears in
	// the image to be annotated.
	BoundingPoly *BoundingPoly `protobuf:"bytes,1,opt,name=bounding_poly,json=boundingPoly" json:"bounding_poly,omitempty"`
	// This bounding polygon is tighter than the previous
	// <code>boundingPoly</code>, and
	// encloses only the skin part of the face. Typically, it is used to
	// eliminate the face from any image analysis that detects the
	// "amount of skin" visible in an image. It is not based on the
	// landmarker results, only on the initial face detection, hence
	// the <code>fd</code> (face detection) prefix.
	FdBoundingPoly *BoundingPoly `protobuf:"bytes,2,opt,name=fd_bounding_poly,json=fdBoundingPoly" json:"fd_bounding_poly,omitempty"`
	// Detected face landmarks.
	Landmarks []*FaceAnnotation_Landmark `protobuf:"bytes,3,rep,name=landmarks" json:"landmarks,omitempty"`
	// Roll angle. Indicates the amount of clockwise/anti-clockwise rotation of
	// the
	// face relative to the image vertical, about the axis perpendicular to the
	// face. Range [-180,180].
	RollAngle float32 `protobuf:"fixed32,4,opt,name=roll_angle,json=rollAngle" json:"roll_angle,omitempty"`
	// Yaw angle. Indicates the leftward/rightward angle that the face is
	// pointing, relative to the vertical plane perpendicular to the image. Range
	// [-180,180].
	PanAngle float32 `protobuf:"fixed32,5,opt,name=pan_angle,json=panAngle" json:"pan_angle,omitempty"`
	// Pitch angle. Indicates the upwards/downwards angle that the face is
	// pointing
	// relative to the image's horizontal plane. Range [-180,180].
	TiltAngle float32 `protobuf:"fixed32,6,opt,name=tilt_angle,json=tiltAngle" json:"tilt_angle,omitempty"`
	// Detection confidence. Range [0, 1].
	DetectionConfidence float32 `protobuf:"fixed32,7,opt,name=detection_confidence,json=detectionConfidence" json:"detection_confidence,omitempty"`
	// Face landmarking confidence. Range [0, 1].
	LandmarkingConfidence float32 `protobuf:"fixed32,8,opt,name=landmarking_confidence,json=landmarkingConfidence" json:"landmarking_confidence,omitempty"`
	// Joy likelihood.
	JoyLikelihood Likelihood `protobuf:"varint,9,opt,name=joy_likelihood,json=joyLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"joy_likelihood,omitempty"`
	// Sorrow likelihood.
	SorrowLikelihood Likelihood `protobuf:"varint,10,opt,name=sorrow_likelihood,json=sorrowLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"sorrow_likelihood,omitempty"`
	// Anger likelihood.
	AngerLikelihood Likelihood `protobuf:"varint,11,opt,name=anger_likelihood,json=angerLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"anger_likelihood,omitempty"`
	// Surprise likelihood.
	SurpriseLikelihood Likelihood `protobuf:"varint,12,opt,name=surprise_likelihood,json=surpriseLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"surprise_likelihood,omitempty"`
	// Under-exposed likelihood.
	UnderExposedLikelihood Likelihood `protobuf:"varint,13,opt,name=under_exposed_likelihood,json=underExposedLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"under_exposed_likelihood,omitempty"`
	// Blurred likelihood.
	BlurredLikelihood Likelihood `protobuf:"varint,14,opt,name=blurred_likelihood,json=blurredLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"blurred_likelihood,omitempty"`
	// Headwear likelihood.
	HeadwearLikelihood Likelihood `protobuf:"varint,15,opt,name=headwear_likelihood,json=headwearLikelihood,enum=google.cloud.vision.v1.Likelihood" json:"headwear_likelihood,omitempty"`
}

func (m *FaceAnnotation) Reset()                    { *m = FaceAnnotation{} }
func (m *FaceAnnotation) String() string            { return proto.CompactTextString(m) }
func (*FaceAnnotation) ProtoMessage()               {}
func (*FaceAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *FaceAnnotation) GetBoundingPoly() *BoundingPoly {
	if m != nil {
		return m.BoundingPoly
	}
	return nil
}

func (m *FaceAnnotation) GetFdBoundingPoly() *BoundingPoly {
	if m != nil {
		return m.FdBoundingPoly
	}
	return nil
}

func (m *FaceAnnotation) GetLandmarks() []*FaceAnnotation_Landmark {
	if m != nil {
		return m.Landmarks
	}
	return nil
}

// A face-specific landmark (for example, a face feature).
// Landmark positions may fall outside the bounds of the image
// when the face is near one or more edges of the image.
// Therefore it is NOT guaranteed that 0 <= x < width or 0 <= y < height.
type FaceAnnotation_Landmark struct {
	// Face landmark type.
	Type FaceAnnotation_Landmark_Type `protobuf:"varint,3,opt,name=type,enum=google.cloud.vision.v1.FaceAnnotation_Landmark_Type" json:"type,omitempty"`
	// Face landmark position.
	Position *Position `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
}

func (m *FaceAnnotation_Landmark) Reset()                    { *m = FaceAnnotation_Landmark{} }
func (m *FaceAnnotation_Landmark) String() string            { return proto.CompactTextString(m) }
func (*FaceAnnotation_Landmark) ProtoMessage()               {}
func (*FaceAnnotation_Landmark) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

func (m *FaceAnnotation_Landmark) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

// Detected entity location information.
type LocationInfo struct {
	// Lat - long location coordinates.
	LatLng *google_type1.LatLng `protobuf:"bytes,1,opt,name=lat_lng,json=latLng" json:"lat_lng,omitempty"`
}

func (m *LocationInfo) Reset()                    { *m = LocationInfo{} }
func (m *LocationInfo) String() string            { return proto.CompactTextString(m) }
func (*LocationInfo) ProtoMessage()               {}
func (*LocationInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *LocationInfo) GetLatLng() *google_type1.LatLng {
	if m != nil {
		return m.LatLng
	}
	return nil
}

// Arbitrary name/value pair.
type Property struct {
	// Name of the property.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Value of the property.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (m *Property) String() string            { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// Set of detected entity features.
type EntityAnnotation struct {
	// Opaque entity ID. Some IDs might be available in Knowledge Graph(KG).
	// For more details on KG please see:
	// https://developers.google.com/knowledge-graph/
	Mid string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
	// The language code for the locale in which the entity textual
	// <code>description</code> (next field) is expressed.
	Locale string `protobuf:"bytes,2,opt,name=locale" json:"locale,omitempty"`
	// Entity textual description, expressed in its <code>locale</code> language.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Overall score of the result. Range [0, 1].
	Score float32 `protobuf:"fixed32,4,opt,name=score" json:"score,omitempty"`
	// The accuracy of the entity detection in an image.
	// For example, for an image containing 'Eiffel Tower,' this field represents
	// the confidence that there is a tower in the query image. Range [0, 1].
	Confidence float32 `protobuf:"fixed32,5,opt,name=confidence" json:"confidence,omitempty"`
	// The relevancy of the ICA (Image Content Annotation) label to the
	// image. For example, the relevancy of 'tower' to an image containing
	// 'Eiffel Tower' is likely higher than an image containing a distant towering
	// building, though the confidence that there is a tower may be the same.
	// Range [0, 1].
	Topicality float32 `protobuf:"fixed32,6,opt,name=topicality" json:"topicality,omitempty"`
	// Image region to which this entity belongs. Not filled currently
	// for `LABEL_DETECTION` features. For `TEXT_DETECTION` (OCR), `boundingPoly`s
	// are produced for the entire text detected in an image region, followed by
	// `boundingPoly`s for each word within the detected text.
	BoundingPoly *BoundingPoly `protobuf:"bytes,7,opt,name=bounding_poly,json=boundingPoly" json:"bounding_poly,omitempty"`
	// The location information for the detected entity. Multiple
	// <code>LocationInfo</code> elements can be present since one location may
	// indicate the location of the scene in the query image, and another the
	// location of the place where the query image was taken. Location information
	// is usually present for landmarks.
	Locations []*LocationInfo `protobuf:"bytes,8,rep,name=locations" json:"locations,omitempty"`
	// Some entities can have additional optional <code>Property</code> fields.
	// For example a different kind of score or string that qualifies the entity.
	Properties []*Property `protobuf:"bytes,9,rep,name=properties" json:"properties,omitempty"`
}

func (m *EntityAnnotation) Reset()                    { *m = EntityAnnotation{} }
func (m *EntityAnnotation) String() string            { return proto.CompactTextString(m) }
func (*EntityAnnotation) ProtoMessage()               {}
func (*EntityAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *EntityAnnotation) GetBoundingPoly() *BoundingPoly {
	if m != nil {
		return m.BoundingPoly
	}
	return nil
}

func (m *EntityAnnotation) GetLocations() []*LocationInfo {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *EntityAnnotation) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

// Set of features pertaining to the image, computed by various computer vision
// methods over safe-search verticals (for example, adult, spoof, medical,
// violence).
type SafeSearchAnnotation struct {
	// Represents the adult contents likelihood for the image.
	Adult Likelihood `protobuf:"varint,1,opt,name=adult,enum=google.cloud.vision.v1.Likelihood" json:"adult,omitempty"`
	// Spoof likelihood. The likelihood that an obvious modification
	// was made to the image's canonical version to make it appear
	// funny or offensive.
	Spoof Likelihood `protobuf:"varint,2,opt,name=spoof,enum=google.cloud.vision.v1.Likelihood" json:"spoof,omitempty"`
	// Likelihood this is a medical image.
	Medical Likelihood `protobuf:"varint,3,opt,name=medical,enum=google.cloud.vision.v1.Likelihood" json:"medical,omitempty"`
	// Violence likelihood.
	Violence Likelihood `protobuf:"varint,4,opt,name=violence,enum=google.cloud.vision.v1.Likelihood" json:"violence,omitempty"`
}

func (m *SafeSearchAnnotation) Reset()                    { *m = SafeSearchAnnotation{} }
func (m *SafeSearchAnnotation) String() string            { return proto.CompactTextString(m) }
func (*SafeSearchAnnotation) ProtoMessage()               {}
func (*SafeSearchAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

// Rectangle determined by min and max LatLng pairs.
type LatLongRect struct {
	// Min lat/long pair.
	MinLatLng *google_type1.LatLng `protobuf:"bytes,1,opt,name=min_lat_lng,json=minLatLng" json:"min_lat_lng,omitempty"`
	// Max lat/long pair.
	MaxLatLng *google_type1.LatLng `protobuf:"bytes,2,opt,name=max_lat_lng,json=maxLatLng" json:"max_lat_lng,omitempty"`
}

func (m *LatLongRect) Reset()                    { *m = LatLongRect{} }
func (m *LatLongRect) String() string            { return proto.CompactTextString(m) }
func (*LatLongRect) ProtoMessage()               {}
func (*LatLongRect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *LatLongRect) GetMinLatLng() *google_type1.LatLng {
	if m != nil {
		return m.MinLatLng
	}
	return nil
}

func (m *LatLongRect) GetMaxLatLng() *google_type1.LatLng {
	if m != nil {
		return m.MaxLatLng
	}
	return nil
}

// Color information consists of RGB channels, score and fraction of
// image the color occupies in the image.
type ColorInfo struct {
	// RGB components of the color.
	Color *google_type.Color `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	// Image-specific score for this color. Value in range [0, 1].
	Score float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
	// Stores the fraction of pixels the color occupies in the image.
	// Value in range [0, 1].
	PixelFraction float32 `protobuf:"fixed32,3,opt,name=pixel_fraction,json=pixelFraction" json:"pixel_fraction,omitempty"`
}

func (m *ColorInfo) Reset()                    { *m = ColorInfo{} }
func (m *ColorInfo) String() string            { return proto.CompactTextString(m) }
func (*ColorInfo) ProtoMessage()               {}
func (*ColorInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ColorInfo) GetColor() *google_type.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

// Set of dominant colors and their corresponding scores.
type DominantColorsAnnotation struct {
	// RGB color values, with their score and pixel fraction.
	Colors []*ColorInfo `protobuf:"bytes,1,rep,name=colors" json:"colors,omitempty"`
}

func (m *DominantColorsAnnotation) Reset()                    { *m = DominantColorsAnnotation{} }
func (m *DominantColorsAnnotation) String() string            { return proto.CompactTextString(m) }
func (*DominantColorsAnnotation) ProtoMessage()               {}
func (*DominantColorsAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *DominantColorsAnnotation) GetColors() []*ColorInfo {
	if m != nil {
		return m.Colors
	}
	return nil
}

// Stores image properties (e.g. dominant colors).
type ImageProperties struct {
	// If present, dominant colors completed successfully.
	DominantColors *DominantColorsAnnotation `protobuf:"bytes,1,opt,name=dominant_colors,json=dominantColors" json:"dominant_colors,omitempty"`
}

func (m *ImageProperties) Reset()                    { *m = ImageProperties{} }
func (m *ImageProperties) String() string            { return proto.CompactTextString(m) }
func (*ImageProperties) ProtoMessage()               {}
func (*ImageProperties) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *ImageProperties) GetDominantColors() *DominantColorsAnnotation {
	if m != nil {
		return m.DominantColors
	}
	return nil
}

// Image context.
type ImageContext struct {
	// Lat/long rectangle that specifies the location of the image.
	LatLongRect *LatLongRect `protobuf:"bytes,1,opt,name=lat_long_rect,json=latLongRect" json:"lat_long_rect,omitempty"`
	// List of languages to use for TEXT_DETECTION. In most cases, an empty value
	// yields the best results since it enables automatic language detection. For
	// languages based on the Latin alphabet, setting `language_hints` is not
	// needed. In rare cases, when the language of the text in the image is known,
	// setting a hint will help get better results (although it will be a
	// significant hindrance if the hint is wrong). Text detection returns an
	// error if one or more of the specified languages is not one of the
	// [supported
	// languages](/translate/v2/translate-reference#supported_languages).
	LanguageHints []string `protobuf:"bytes,2,rep,name=language_hints,json=languageHints" json:"language_hints,omitempty"`
}

func (m *ImageContext) Reset()                    { *m = ImageContext{} }
func (m *ImageContext) String() string            { return proto.CompactTextString(m) }
func (*ImageContext) ProtoMessage()               {}
func (*ImageContext) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ImageContext) GetLatLongRect() *LatLongRect {
	if m != nil {
		return m.LatLongRect
	}
	return nil
}

// Request for performing Google Cloud Vision API tasks over a user-provided
// image, with user-requested features.
type AnnotateImageRequest struct {
	// The image to be processed.
	Image *Image `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// Requested features.
	Features []*Feature `protobuf:"bytes,2,rep,name=features" json:"features,omitempty"`
	// Additional context that may accompany the image.
	ImageContext *ImageContext `protobuf:"bytes,3,opt,name=image_context,json=imageContext" json:"image_context,omitempty"`
}

func (m *AnnotateImageRequest) Reset()                    { *m = AnnotateImageRequest{} }
func (m *AnnotateImageRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnotateImageRequest) ProtoMessage()               {}
func (*AnnotateImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *AnnotateImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *AnnotateImageRequest) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *AnnotateImageRequest) GetImageContext() *ImageContext {
	if m != nil {
		return m.ImageContext
	}
	return nil
}

// Response to an image annotation request.
type AnnotateImageResponse struct {
	// If present, face detection completed successfully.
	FaceAnnotations []*FaceAnnotation `protobuf:"bytes,1,rep,name=face_annotations,json=faceAnnotations" json:"face_annotations,omitempty"`
	// If present, landmark detection completed successfully.
	LandmarkAnnotations []*EntityAnnotation `protobuf:"bytes,2,rep,name=landmark_annotations,json=landmarkAnnotations" json:"landmark_annotations,omitempty"`
	// If present, logo detection completed successfully.
	LogoAnnotations []*EntityAnnotation `protobuf:"bytes,3,rep,name=logo_annotations,json=logoAnnotations" json:"logo_annotations,omitempty"`
	// If present, label detection completed successfully.
	LabelAnnotations []*EntityAnnotation `protobuf:"bytes,4,rep,name=label_annotations,json=labelAnnotations" json:"label_annotations,omitempty"`
	// If present, text (OCR) detection completed successfully.
	TextAnnotations []*EntityAnnotation `protobuf:"bytes,5,rep,name=text_annotations,json=textAnnotations" json:"text_annotations,omitempty"`
	// If present, safe-search annotation completed successfully.
	SafeSearchAnnotation *SafeSearchAnnotation `protobuf:"bytes,6,opt,name=safe_search_annotation,json=safeSearchAnnotation" json:"safe_search_annotation,omitempty"`
	// If present, image properties were extracted successfully.
	ImagePropertiesAnnotation *ImageProperties `protobuf:"bytes,8,opt,name=image_properties_annotation,json=imagePropertiesAnnotation" json:"image_properties_annotation,omitempty"`
	// If set, represents the error message for the operation.
	// Note that filled-in mage annotations are guaranteed to be
	// correct, even when <code>error</code> is non-empty.
	Error *google_rpc.Status `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *AnnotateImageResponse) Reset()                    { *m = AnnotateImageResponse{} }
func (m *AnnotateImageResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnotateImageResponse) ProtoMessage()               {}
func (*AnnotateImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *AnnotateImageResponse) GetFaceAnnotations() []*FaceAnnotation {
	if m != nil {
		return m.FaceAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetLandmarkAnnotations() []*EntityAnnotation {
	if m != nil {
		return m.LandmarkAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetLogoAnnotations() []*EntityAnnotation {
	if m != nil {
		return m.LogoAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetLabelAnnotations() []*EntityAnnotation {
	if m != nil {
		return m.LabelAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetTextAnnotations() []*EntityAnnotation {
	if m != nil {
		return m.TextAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetSafeSearchAnnotation() *SafeSearchAnnotation {
	if m != nil {
		return m.SafeSearchAnnotation
	}
	return nil
}

func (m *AnnotateImageResponse) GetImagePropertiesAnnotation() *ImageProperties {
	if m != nil {
		return m.ImagePropertiesAnnotation
	}
	return nil
}

func (m *AnnotateImageResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Multiple image annotation requests are batched into a single service call.
type BatchAnnotateImagesRequest struct {
	// Individual image annotation requests for this batch.
	Requests []*AnnotateImageRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *BatchAnnotateImagesRequest) Reset()                    { *m = BatchAnnotateImagesRequest{} }
func (m *BatchAnnotateImagesRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchAnnotateImagesRequest) ProtoMessage()               {}
func (*BatchAnnotateImagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *BatchAnnotateImagesRequest) GetRequests() []*AnnotateImageRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Response to a batch image annotation request.
type BatchAnnotateImagesResponse struct {
	// Individual responses to image annotation requests within the batch.
	Responses []*AnnotateImageResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *BatchAnnotateImagesResponse) Reset()                    { *m = BatchAnnotateImagesResponse{} }
func (m *BatchAnnotateImagesResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchAnnotateImagesResponse) ProtoMessage()               {}
func (*BatchAnnotateImagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *BatchAnnotateImagesResponse) GetResponses() []*AnnotateImageResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func init() {
	proto.RegisterType((*Feature)(nil), "google.cloud.vision.v1.Feature")
	proto.RegisterType((*ImageSource)(nil), "google.cloud.vision.v1.ImageSource")
	proto.RegisterType((*Image)(nil), "google.cloud.vision.v1.Image")
	proto.RegisterType((*FaceAnnotation)(nil), "google.cloud.vision.v1.FaceAnnotation")
	proto.RegisterType((*FaceAnnotation_Landmark)(nil), "google.cloud.vision.v1.FaceAnnotation.Landmark")
	proto.RegisterType((*LocationInfo)(nil), "google.cloud.vision.v1.LocationInfo")
	proto.RegisterType((*Property)(nil), "google.cloud.vision.v1.Property")
	proto.RegisterType((*EntityAnnotation)(nil), "google.cloud.vision.v1.EntityAnnotation")
	proto.RegisterType((*SafeSearchAnnotation)(nil), "google.cloud.vision.v1.SafeSearchAnnotation")
	proto.RegisterType((*LatLongRect)(nil), "google.cloud.vision.v1.LatLongRect")
	proto.RegisterType((*ColorInfo)(nil), "google.cloud.vision.v1.ColorInfo")
	proto.RegisterType((*DominantColorsAnnotation)(nil), "google.cloud.vision.v1.DominantColorsAnnotation")
	proto.RegisterType((*ImageProperties)(nil), "google.cloud.vision.v1.ImageProperties")
	proto.RegisterType((*ImageContext)(nil), "google.cloud.vision.v1.ImageContext")
	proto.RegisterType((*AnnotateImageRequest)(nil), "google.cloud.vision.v1.AnnotateImageRequest")
	proto.RegisterType((*AnnotateImageResponse)(nil), "google.cloud.vision.v1.AnnotateImageResponse")
	proto.RegisterType((*BatchAnnotateImagesRequest)(nil), "google.cloud.vision.v1.BatchAnnotateImagesRequest")
	proto.RegisterType((*BatchAnnotateImagesResponse)(nil), "google.cloud.vision.v1.BatchAnnotateImagesResponse")
	proto.RegisterEnum("google.cloud.vision.v1.Likelihood", Likelihood_name, Likelihood_value)
	proto.RegisterEnum("google.cloud.vision.v1.Feature_Type", Feature_Type_name, Feature_Type_value)
	proto.RegisterEnum("google.cloud.vision.v1.FaceAnnotation_Landmark_Type", FaceAnnotation_Landmark_Type_name, FaceAnnotation_Landmark_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ImageAnnotator service

type ImageAnnotatorClient interface {
	// Run image detection and annotation for a batch of images.
	BatchAnnotateImages(ctx context.Context, in *BatchAnnotateImagesRequest, opts ...grpc.CallOption) (*BatchAnnotateImagesResponse, error)
}

type imageAnnotatorClient struct {
	cc *grpc.ClientConn
}

func NewImageAnnotatorClient(cc *grpc.ClientConn) ImageAnnotatorClient {
	return &imageAnnotatorClient{cc}
}

func (c *imageAnnotatorClient) BatchAnnotateImages(ctx context.Context, in *BatchAnnotateImagesRequest, opts ...grpc.CallOption) (*BatchAnnotateImagesResponse, error) {
	out := new(BatchAnnotateImagesResponse)
	err := grpc.Invoke(ctx, "/google.cloud.vision.v1.ImageAnnotator/BatchAnnotateImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageAnnotator service

type ImageAnnotatorServer interface {
	// Run image detection and annotation for a batch of images.
	BatchAnnotateImages(context.Context, *BatchAnnotateImagesRequest) (*BatchAnnotateImagesResponse, error)
}

func RegisterImageAnnotatorServer(s *grpc.Server, srv ImageAnnotatorServer) {
	s.RegisterService(&_ImageAnnotator_serviceDesc, srv)
}

func _ImageAnnotator_BatchAnnotateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAnnotateImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAnnotatorServer).BatchAnnotateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.vision.v1.ImageAnnotator/BatchAnnotateImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAnnotatorServer).BatchAnnotateImages(ctx, req.(*BatchAnnotateImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageAnnotator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.vision.v1.ImageAnnotator",
	HandlerType: (*ImageAnnotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchAnnotateImages",
			Handler:    _ImageAnnotator_BatchAnnotateImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/cloud/vision/v1/image_annotator.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 2051 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0x4f, 0x73, 0xe2, 0xc8,
	0x15, 0x0f, 0x60, 0x30, 0x3c, 0x0c, 0xc8, 0xed, 0x3f, 0x61, 0xec, 0x9d, 0x19, 0xaf, 0xf2, 0x6f,
	0x6a, 0x6b, 0x03, 0x19, 0xcf, 0x6e, 0xd5, 0x66, 0x33, 0xd9, 0x0a, 0x60, 0xd9, 0xa6, 0x8c, 0x81,
	0x34, 0x90, 0x89, 0x93, 0x54, 0x54, 0x32, 0x34, 0x8c, 0x76, 0x65, 0x89, 0x48, 0xc2, 0x63, 0x5f,
	0x72, 0x48, 0x55, 0xaa, 0x72, 0xcf, 0x39, 0xf9, 0x0e, 0xa9, 0x4a, 0xe5, 0x9a, 0x73, 0x8e, 0xa9,
	0xfd, 0x0a, 0xf9, 0x10, 0x39, 0xa6, 0xff, 0x49, 0x34, 0x5e, 0xe3, 0xe0, 0xb9, 0x80, 0xfa, 0xbd,
	0xf7, 0xfb, 0xbd, 0xa7, 0xd7, 0xdd, 0xaf, 0xfb, 0x09, 0xce, 0x26, 0x9e, 0x37, 0x71, 0x48, 0x65,
	0xe2, 0x39, 0x96, 0x3b, 0xa9, 0x78, 0xfe, 0xa4, 0x3a, 0x21, 0xee, 0xd4, 0xf7, 0x42, 0xaf, 0x2a,
	0x54, 0xd6, 0xd4, 0x0e, 0xaa, 0x43, 0xc7, 0x9b, 0x8d, 0xaa, 0xd7, 0x76, 0x60, 0x7b, 0x6e, 0xf5,
	0xfa, 0x65, 0xd5, 0xbe, 0xb2, 0x26, 0xc4, 0xb4, 0x5c, 0xd7, 0x0b, 0xad, 0xd0, 0xf3, 0x2b, 0x1c,
	0x80, 0x76, 0x25, 0x19, 0xb7, 0xae, 0x08, 0xeb, 0xca, 0xf5, 0xcb, 0xbd, 0xe6, 0x6a, 0x4e, 0xe8,
	0x4f, 0x35, 0x20, 0xfe, 0xb5, 0x3d, 0x24, 0x43, 0xcf, 0x1d, 0xdb, 0x93, 0xaa, 0x74, 0x40, 0x69,
	0x02, 0xe1, 0x62, 0xef, 0xe8, 0xfd, 0xe2, 0x9d, 0x10, 0xef, 0x8a, 0x84, 0xfe, 0xad, 0x64, 0xf9,
	0xe9, 0x6a, 0x2c, 0xfe, 0x74, 0x58, 0x0d, 0xa8, 0xff, 0x59, 0x20, 0xff, 0x24, 0xfc, 0xf5, 0x6a,
	0xf0, 0xf0, 0x76, 0x4a, 0xaa, 0x43, 0xcf, 0xf1, 0x7c, 0xf1, 0x2b, 0xd1, 0x5f, 0x3c, 0x02, 0xed,
	0x58, 0xa1, 0xe3, 0x4e, 0xe4, 0x9f, 0xc0, 0xeb, 0x7f, 0x49, 0xc2, 0xfa, 0x31, 0xa1, 0xe1, 0xf8,
	0x04, 0x7d, 0x06, 0x6b, 0xcc, 0xae, 0x9c, 0x38, 0x48, 0xbc, 0x28, 0x1e, 0x7e, 0xb7, 0x72, 0xff,
	0x04, 0x54, 0xa4, 0x79, 0xa5, 0x4f, 0x6d, 0x31, 0x47, 0xa0, 0xe7, 0x90, 0xbf, 0xb2, 0x6e, 0x4c,
	0x9f, 0x04, 0x33, 0x27, 0x0c, 0xca, 0x49, 0x4a, 0x90, 0xc6, 0x40, 0x45, 0x58, 0x48, 0xf4, 0x7f,
	0x24, 0x60, 0x8d, 0xd9, 0xa3, 0x6d, 0xd0, 0xfa, 0x17, 0x5d, 0xc3, 0x1c, 0xb4, 0x7b, 0x5d, 0xa3,
	0xd1, 0x3c, 0x6e, 0x1a, 0x47, 0xda, 0xb7, 0x10, 0x82, 0xe2, 0x71, 0xad, 0x61, 0x98, 0x47, 0x46,
	0xdf, 0x68, 0xf4, 0x9b, 0x9d, 0xb6, 0x96, 0x40, 0xbb, 0x80, 0x5a, 0xb5, 0xf6, 0xd1, 0x79, 0x0d,
	0x9f, 0x29, 0xf2, 0x24, 0xb3, 0x6d, 0x75, 0x4e, 0x3a, 0x8a, 0x2c, 0x85, 0xb6, 0xa0, 0xd4, 0xaa,
	0xd5, 0x8d, 0x96, 0x22, 0x5c, 0x63, 0x86, 0x7d, 0xe3, 0x97, 0x7d, 0x45, 0x96, 0x46, 0x4f, 0x60,
	0xa7, 0x57, 0x3b, 0x36, 0xcc, 0x9e, 0x51, 0xc3, 0x8d, 0x53, 0x45, 0x95, 0x61, 0x91, 0x35, 0xcf,
	0x6b, 0x27, 0x86, 0xd9, 0xc5, 0x9d, 0xae, 0x81, 0xfb, 0x4d, 0xa3, 0xa7, 0xad, 0xeb, 0x2f, 0x21,
	0xdf, 0x64, 0xcb, 0xb3, 0xe7, 0xcd, 0xfc, 0x21, 0x41, 0x3a, 0x14, 0x26, 0xc3, 0xc0, 0x14, 0x2b,
	0x76, 0xe6, 0xdb, 0x3c, 0x57, 0x39, 0x9c, 0xa7, 0x42, 0x6e, 0x36, 0xf0, 0x6d, 0xfd, 0xb7, 0x90,
	0xe6, 0xcf, 0xa8, 0x0c, 0xeb, 0x74, 0xe9, 0x85, 0xc4, 0x0d, 0xb9, 0xd9, 0x06, 0x8e, 0x86, 0xe8,
	0x27, 0x90, 0x09, 0x38, 0x21, 0x4f, 0x55, 0xfe, 0xf0, 0x3b, 0xcb, 0x72, 0xad, 0xf8, 0xc6, 0x12,
	0xa2, 0xff, 0xbb, 0x44, 0xb3, 0x65, 0x0d, 0x49, 0x2d, 0x5e, 0xcf, 0xa8, 0x09, 0x85, 0x4b, 0x6f,
	0xe6, 0x8e, 0x6c, 0x77, 0x62, 0x4e, 0x3d, 0xe7, 0x96, 0xfb, 0xcb, 0x2f, 0x9f, 0xc2, 0xba, 0x34,
	0xee, 0x52, 0x5b, 0xbc, 0x71, 0xa9, 0x8c, 0x50, 0x1b, 0xb4, 0xf1, 0xc8, 0x5c, 0x64, 0x4b, 0x3e,
	0x82, 0xad, 0x38, 0x1e, 0xa9, 0x63, 0x74, 0x0e, 0x39, 0xba, 0x32, 0x47, 0x57, 0x96, 0xff, 0x55,
	0x50, 0x4e, 0x1d, 0xa4, 0x28, 0x51, 0x75, 0xe9, 0xca, 0x5a, 0x78, 0xab, 0x4a, 0x4b, 0xe2, 0xf0,
	0x9c, 0x01, 0x3d, 0x05, 0xf0, 0x3d, 0xc7, 0xa1, 0xd5, 0x82, 0x12, 0x94, 0xd7, 0x68, 0x60, 0x49,
	0x9c, 0x63, 0x92, 0x1a, 0x13, 0xa0, 0x7d, 0xc8, 0x4d, 0x2d, 0x57, 0x6a, 0xd3, 0x5c, 0x9b, 0xa5,
	0x02, 0xa1, 0xa4, 0xd8, 0xd0, 0x76, 0x42, 0xa9, 0xcd, 0x08, 0x2c, 0x93, 0x08, 0xf5, 0x4b, 0xd8,
	0x1e, 0x91, 0x90, 0x0c, 0x99, 0x6f, 0x93, 0xd7, 0x8c, 0x11, 0x71, 0xe9, 0x14, 0xad, 0x73, 0xc3,
	0xad, 0x58, 0xd7, 0x88, 0x55, 0xe8, 0x53, 0xd8, 0x8d, 0x42, 0x63, 0xc9, 0x52, 0x40, 0x59, 0x0e,
	0xda, 0x51, 0xb4, 0x0a, 0xac, 0x09, 0xc5, 0x2f, 0xbd, 0x5b, 0xd3, 0xb1, 0xbf, 0x22, 0x8e, 0xfd,
	0xd6, 0xf3, 0x46, 0xe5, 0x1c, 0xdf, 0x72, 0xfa, 0xb2, 0xc4, 0xb4, 0x62, 0x4b, 0x5c, 0xa0, 0xc8,
	0xf9, 0x10, 0x75, 0x60, 0x33, 0xf0, 0x7c, 0xdf, 0x7b, 0xa7, 0xb2, 0xc1, 0xca, 0x6c, 0x9a, 0x00,
	0x2b, 0x84, 0xe7, 0xa0, 0xd1, 0xfc, 0x10, 0x5f, 0xe5, 0xcb, 0xaf, 0xcc, 0x57, 0xe2, 0x58, 0x85,
	0xae, 0x07, 0x5b, 0xc1, 0xcc, 0x9f, 0xfa, 0x76, 0x40, 0x54, 0xc6, 0x8d, 0x95, 0x19, 0x51, 0x04,
	0x57, 0x48, 0x7f, 0x03, 0x65, 0xba, 0xc2, 0x68, 0x8c, 0xe4, 0x66, 0xea, 0x05, 0x64, 0xa4, 0x32,
	0x17, 0x56, 0x66, 0xde, 0xe5, 0x1c, 0x86, 0xa0, 0x50, 0xd8, 0x7f, 0x0e, 0xe8, 0xd2, 0x99, 0xf9,
	0xfe, 0x22, 0x6f, 0x71, 0x65, 0xde, 0x4d, 0x89, 0x5e, 0xcc, 0xc2, 0x5b, 0x62, 0x8d, 0xde, 0x11,
	0x6b, 0x21, 0xaf, 0xa5, 0xd5, 0xb3, 0x10, 0xc1, 0xe7, 0xb2, 0xbd, 0x7f, 0xad, 0x43, 0x36, 0xda,
	0x22, 0xe8, 0x54, 0xd6, 0xee, 0x14, 0xa7, 0xfc, 0xe4, 0x91, 0x3b, 0x4c, 0xad, 0xe5, 0xaf, 0x21,
	0x4b, 0x33, 0x62, 0x33, 0x3d, 0xdf, 0x5f, 0xf9, 0xc3, 0x83, 0x65, 0x6c, 0x5d, 0x69, 0x87, 0x63,
	0x84, 0xfe, 0xf7, 0xcc, 0xbc, 0xd0, 0x0f, 0xda, 0x67, 0xed, 0xce, 0x9b, 0xb6, 0x19, 0x95, 0x71,
	0x5a, 0xe8, 0x37, 0x68, 0xc8, 0xc6, 0x71, 0xdf, 0x34, 0x2e, 0x0c, 0x5a, 0xe2, 0x0b, 0x90, 0xc3,
	0xcd, 0x93, 0x53, 0x31, 0x4c, 0xd2, 0x7a, 0xb9, 0xcd, 0x95, 0x9d, 0x63, 0x33, 0x32, 0xaa, 0xe3,
	0xce, 0x1b, 0x5a, 0xdf, 0x69, 0xd9, 0x16, 0x86, 0x77, 0x55, 0x6b, 0x4c, 0x15, 0x81, 0x62, 0x2e,
	0xae, 0x4a, 0xa3, 0x3d, 0xd8, 0x8d, 0x51, 0x8b, 0xba, 0x0c, 0x83, 0x9d, 0x37, 0x8f, 0xba, 0x9d,
	0x66, 0xbb, 0x6f, 0xd6, 0x8d, 0xfe, 0x1b, 0xc3, 0x68, 0x33, 0x2d, 0x2d, 0xf9, 0x2c, 0xc6, 0x76,
	0xa7, 0x67, 0x98, 0xfd, 0x66, 0x57, 0xcb, 0xb2, 0x18, 0x07, 0x5d, 0x7a, 0x1e, 0x98, 0x2d, 0x3a,
	0xcc, 0xb1, 0x61, 0xab, 0xf3, 0x46, 0x0e, 0x01, 0x15, 0x01, 0xce, 0x3b, 0x83, 0xfe, 0x29, 0x8f,
	0x4a, 0xcb, 0xa3, 0x12, 0xe4, 0xc5, 0x98, 0xfb, 0xd3, 0x36, 0x90, 0x06, 0x1b, 0x42, 0xd0, 0x30,
	0xda, 0x7d, 0x03, 0x6b, 0x05, 0xb4, 0x03, 0x9b, 0x9c, 0xbe, 0xde, 0xe9, 0xf7, 0x3b, 0xe7, 0xd2,
	0xb0, 0xc8, 0xf2, 0xa5, 0x8a, 0x39, 0x5f, 0x89, 0x1d, 0x82, 0xaa, 0x54, 0x92, 0x68, 0xf1, 0x5b,
	0xd3, 0x90, 0xcd, 0x7e, 0xa7, 0x4b, 0xf5, 0x83, 0xf6, 0x51, 0x0d, 0x5f, 0x68, 0x9b, 0x0b, 0x2a,
	0xf1, 0xd6, 0x8d, 0x0e, 0x6e, 0x53, 0x14, 0x42, 0x1f, 0x40, 0x39, 0x56, 0x49, 0xc6, 0x18, 0xb8,
	0x15, 0xa7, 0x9f, 0x69, 0xf9, 0x83, 0xc4, 0x6d, 0xcf, 0x13, 0xf9, 0x0d, 0x77, 0x3b, 0x8b, 0xba,
	0x05, 0x7f, 0xbb, 0xb4, 0xe0, 0x3e, 0x99, 0xeb, 0xee, 0x3a, 0xfc, 0xf6, 0x7c, 0x56, 0xef, 0x7a,
	0x2c, 0xd3, 0x0b, 0xc5, 0xbe, 0x3a, 0xcf, 0xa6, 0x98, 0x82, 0x68, 0xc6, 0xb4, 0x27, 0xe8, 0x00,
	0x3e, 0x58, 0x98, 0xd2, 0xbb, 0x16, 0x7b, 0x2c, 0xa1, 0x82, 0xa2, 0x86, 0xcd, 0x3e, 0xae, 0x9d,
	0xb0, 0x53, 0x7e, 0x9f, 0x65, 0x5f, 0xe2, 0x14, 0xf1, 0x07, 0xfc, 0x52, 0x11, 0xbd, 0x7b, 0x77,
	0xd0, 0x6d, 0xb6, 0xb4, 0xa7, 0xec, 0x52, 0x31, 0x0f, 0x4f, 0x08, 0x9f, 0x31, 0xfc, 0x71, 0x07,
	0x1b, 0xa7, 0x46, 0xed, 0xc8, 0x3c, 0xe1, 0x77, 0x8e, 0x56, 0x4d, 0x7b, 0x8e, 0x36, 0xa1, 0xd0,
	0x38, 0x6d, 0xb6, 0xcd, 0x93, 0x76, 0xad, 0x7f, 0xca, 0x28, 0x0f, 0x98, 0x7f, 0x2e, 0xe2, 0xbc,
	0x27, 0x9d, 0x36, 0x93, 0x7e, 0xc8, 0xf0, 0x5c, 0x2a, 0x98, 0xa5, 0x58, 0xd7, 0x5f, 0xc3, 0x46,
	0xcb, 0x1b, 0xf2, 0x4d, 0xd9, 0x74, 0xc7, 0x1e, 0xfa, 0x18, 0xd6, 0xe9, 0x35, 0xcd, 0xa4, 0xf7,
	0x34, 0x79, 0x94, 0x6f, 0x45, 0x7b, 0x90, 0xed, 0x51, 0xba, 0x6f, 0xc3, 0x96, 0x3b, 0xc1, 0x19,
	0x87, 0xff, 0xeb, 0x9f, 0x40, 0xb6, 0xeb, 0x7b, 0x53, 0xe2, 0x87, 0xb7, 0xf4, 0x4d, 0xd6, 0x5c,
	0xeb, 0x8a, 0xc8, 0x8b, 0x09, 0x7f, 0xa6, 0xa1, 0xa4, 0xaf, 0x2d, 0x67, 0x26, 0x6e, 0x1b, 0x39,
	0x2c, 0x06, 0xfa, 0x1f, 0x53, 0xa0, 0x19, 0x6e, 0x68, 0x87, 0xb7, 0xca, 0x4d, 0x42, 0x83, 0xd4,
	0x95, 0x3d, 0x92, 0x68, 0xf6, 0x48, 0x97, 0x60, 0xc6, 0xa1, 0xa1, 0x39, 0x11, 0x5a, 0x8e, 0xe8,
	0x0c, 0xe4, 0x47, 0x24, 0x18, 0xfa, 0xf6, 0x94, 0x97, 0x8a, 0x94, 0xb8, 0x08, 0x29, 0x22, 0xe6,
	0x36, 0x18, 0x7a, 0x7e, 0x74, 0x4c, 0x8b, 0x01, 0x7a, 0x06, 0xa0, 0x9c, 0x93, 0xe2, 0x8c, 0x56,
	0x24, 0x4c, 0x1f, 0x7a, 0x53, 0x9b, 0xfa, 0xa0, 0x91, 0xc9, 0x53, 0x5a, 0x91, 0x7c, 0xf3, 0xae,
	0xb3, 0xfe, 0xde, 0x77, 0x9d, 0x3a, 0xbd, 0x9b, 0xc8, 0xac, 0x07, 0xf4, 0xc4, 0x4e, 0x3d, 0x44,
	0xa3, 0x4e, 0x0f, 0x9e, 0xc3, 0xd0, 0xcf, 0x00, 0xa6, 0x22, 0xf7, 0x36, 0x09, 0xe8, 0x39, 0x9e,
	0x7a, 0xb0, 0x60, 0xca, 0x59, 0xc2, 0x0a, 0x46, 0xff, 0x53, 0x12, 0xb6, 0x7b, 0xd6, 0x98, 0xf4,
	0x68, 0x79, 0x1f, 0xbe, 0x55, 0xe6, 0xe2, 0x33, 0x48, 0x5b, 0x23, 0x7a, 0x7d, 0x96, 0x17, 0xf2,
	0x55, 0xce, 0x09, 0x01, 0x60, 0xc8, 0x60, 0xea, 0x79, 0x63, 0x3e, 0x65, 0x2b, 0x22, 0x39, 0x80,
	0x56, 0xff, 0xf5, 0x2b, 0x32, 0x62, 0xb9, 0x96, 0x47, 0xc9, 0x2a, 0xd8, 0x08, 0x82, 0xbe, 0x80,
	0xec, 0xb5, 0xed, 0x39, 0x7c, 0x66, 0xd7, 0x56, 0x86, 0xc7, 0x18, 0xfd, 0x1d, 0xe4, 0xd9, 0xd2,
	0xf6, 0xe8, 0xda, 0xa6, 0x77, 0x2d, 0xf4, 0x8a, 0xb6, 0x15, 0xb6, 0x6b, 0xae, 0xb0, 0x13, 0x72,
	0xd4, 0x4e, 0x3c, 0x72, 0x10, 0xed, 0x45, 0x22, 0x50, 0xf2, 0x21, 0x90, 0x75, 0x23, 0x1e, 0x75,
	0x1f, 0x72, 0x0d, 0xd6, 0x55, 0xf1, 0xcd, 0xf7, 0x02, 0xd2, 0xbc, 0xc5, 0x92, 0x0e, 0xd1, 0x02,
	0x96, 0x9b, 0x61, 0x61, 0x30, 0x5f, 0xe1, 0x49, 0x75, 0x85, 0x7f, 0x0f, 0x8a, 0x53, 0xfb, 0x86,
	0x38, 0xe6, 0xd8, 0xb7, 0x86, 0xf1, 0xe6, 0x48, 0xe2, 0x02, 0x97, 0x1e, 0x4b, 0xa1, 0x3e, 0x80,
	0xf2, 0x91, 0x47, 0xe3, 0xb6, 0xdc, 0x90, 0x93, 0x06, 0xca, 0xd4, 0xff, 0x18, 0x32, 0xdc, 0x43,
	0x40, 0x63, 0x60, 0x2b, 0xea, 0xc3, 0x65, 0x69, 0x8c, 0xa3, 0xc6, 0x12, 0xa0, 0x3b, 0x50, 0xe2,
	0x5d, 0x43, 0x37, 0x5e, 0x61, 0xe8, 0x02, 0x4a, 0x23, 0xe9, 0xc9, 0x8c, 0x69, 0xd9, 0xab, 0xfd,
	0x68, 0x19, 0xed, 0xb2, 0xc0, 0x70, 0x71, 0xb4, 0xa0, 0xd1, 0x7f, 0x0f, 0x1b, 0xdc, 0x5b, 0x83,
	0x75, 0x36, 0x37, 0x21, 0x3a, 0x81, 0x02, 0xcf, 0x3c, 0x9d, 0x42, 0xda, 0x0e, 0x0e, 0x43, 0xe9,
	0x68, 0x69, 0x83, 0xa3, 0x4c, 0x37, 0xce, 0x3b, 0xca, 0xdc, 0xd3, 0x24, 0xb2, 0x8e, 0x76, 0xc6,
	0x1a, 0xad, 0xb7, 0xb6, 0xcb, 0xbb, 0xca, 0x14, 0xad, 0x30, 0x85, 0x48, 0x7a, 0xca, 0x84, 0xfa,
	0xd7, 0x09, 0xd8, 0x96, 0xe1, 0x11, 0x1e, 0x08, 0x26, 0xbf, 0x9b, 0x91, 0x80, 0xad, 0x9d, 0x34,
	0xef, 0xd2, 0x64, 0x00, 0x4f, 0x1f, 0xec, 0xb0, 0xb0, 0xb0, 0xa5, 0x7d, 0x59, 0x76, 0x2c, 0xba,
	0x5b, 0xe1, 0x2e, 0x7f, 0xf8, 0xfc, 0xff, 0x74, 0xc1, 0x38, 0x06, 0xb0, 0xc2, 0x24, 0xfa, 0xc2,
	0xa1, 0xc8, 0x05, 0x9f, 0xf5, 0x07, 0x2a, 0x8a, 0x9a, 0x37, 0xbc, 0x61, 0x2b, 0x23, 0xfd, 0x9f,
	0x69, 0xd8, 0xb9, 0xf3, 0x56, 0x74, 0x7b, 0xba, 0x01, 0xa1, 0x97, 0x53, 0x6d, 0x4c, 0xef, 0x70,
	0xa6, 0xf2, 0x31, 0x43, 0x2e, 0x91, 0xef, 0xaf, 0x76, 0xe7, 0xc3, 0xa5, 0xf1, 0xc2, 0x38, 0x40,
	0xbf, 0x86, 0xed, 0xa8, 0x4d, 0x59, 0xa0, 0x15, 0x09, 0x78, 0xb1, 0x8c, 0xf6, 0xee, 0xd1, 0x81,
	0xb7, 0x22, 0x16, 0x95, 0xbc, 0x07, 0x9a, 0xe3, 0x4d, 0xbc, 0x05, 0xe2, 0xd4, 0x23, 0x89, 0x4b,
	0x8c, 0x41, 0x25, 0x1d, 0xc0, 0xa6, 0x63, 0x5d, 0x12, 0x67, 0x81, 0x75, 0xed, 0x91, 0xac, 0x1a,
	0xa7, 0xb8, 0x13, 0x2b, 0xcb, 0xfe, 0x02, 0x6b, 0xfa, 0xb1, 0xb1, 0x32, 0x06, 0x95, 0xf4, 0x12,
	0x76, 0x03, 0x5a, 0xdc, 0xcd, 0x80, 0x57, 0x77, 0x85, 0x9b, 0x1f, 0x6d, 0xf9, 0xc3, 0x8f, 0x97,
	0x51, 0xdf, 0x77, 0x24, 0xe0, 0xed, 0xe0, 0xbe, 0x83, 0x62, 0x02, 0xfb, 0x62, 0xe5, 0xcd, 0x4f,
	0x15, 0xd5, 0x51, 0x96, 0x3b, 0xfa, 0xc1, 0x83, 0xeb, 0x70, 0x5e, 0x2d, 0xf0, 0x13, 0x7b, 0x51,
	0xa0, 0x38, 0xa2, 0x95, 0x91, 0xd0, 0x7e, 0xd1, 0xe7, 0xfd, 0xaa, 0x52, 0x19, 0xfd, 0xe9, 0xb0,
	0xd2, 0xe3, 0x1f, 0xb5, 0xb0, 0x30, 0xd0, 0xc7, 0xb0, 0x57, 0xb7, 0xc2, 0x38, 0x4a, 0xb1, 0x8a,
	0x83, 0x68, 0x73, 0x9e, 0x42, 0xd6, 0x17, 0x8f, 0xd1, 0xea, 0x5d, 0x9a, 0x86, 0xfb, 0x36, 0x37,
	0x8e, 0xd1, 0xfa, 0x97, 0xb0, 0x7f, 0xaf, 0x1f, 0xb9, 0x5d, 0xce, 0x20, 0xe7, 0xcb, 0xe7, 0xc8,
	0xd3, 0x0f, 0x57, 0xf4, 0x24, 0x50, 0x78, 0x8e, 0xff, 0x88, 0x00, 0x28, 0x3d, 0x5d, 0x1e, 0xd6,
	0x65, 0x83, 0x43, 0xfb, 0x1a, 0x7a, 0xff, 0xfb, 0x85, 0x81, 0x2f, 0xcc, 0x41, 0xbb, 0xd5, 0x3c,
	0x33, 0x5a, 0x17, 0xb4, 0xb9, 0xa1, 0x6d, 0x44, 0x3c, 0x4a, 0xb2, 0x51, 0xb7, 0xd3, 0xeb, 0x35,
	0xeb, 0x2d, 0x83, 0xf6, 0x33, 0x00, 0x19, 0xa9, 0x59, 0x63, 0x2d, 0x03, 0x87, 0x4a, 0x41, 0xfa,
	0xf0, 0x6f, 0x09, 0x28, 0xf2, 0x18, 0x6a, 0xd1, 0x17, 0x51, 0xf4, 0xd7, 0x04, 0x6c, 0xdd, 0xf3,
	0x9a, 0xe8, 0x70, 0xe9, 0xa5, 0x67, 0x69, 0xee, 0xf7, 0x5e, 0x3d, 0x0a, 0x23, 0xde, 0x5d, 0x7f,
	0xf6, 0x87, 0xaf, 0xff, 0xf3, 0xe7, 0x64, 0x59, 0xdf, 0x8a, 0xbf, 0xd7, 0x06, 0x9f, 0xcb, 0x15,
	0x46, 0x3e, 0x4f, 0x7c, 0x54, 0xbf, 0x82, 0xbd, 0xa1, 0x77, 0xb5, 0x84, 0xb9, 0xbe, 0xb5, 0xf8,
	0x3a, 0x5d, 0xf6, 0xe5, 0xb1, 0x9b, 0xf8, 0xd5, 0xa7, 0xef, 0xf5, 0xf9, 0xf5, 0xbf, 0x89, 0xc4,
	0x65, 0x86, 0x1b, 0xbd, 0xfa, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xf8, 0x96, 0xf0, 0x71,
	0x16, 0x00, 0x00,
}
